"glossifi-audit":"Qmbcgj1V5gTyknz8HfZvS6dSE9BabEAkjdVmGdNuotoogD", 
"glossifi-frontend": 
"", 
"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_factoryV2","type":"address"},{"internalType":"address","name":"factoryV3","type":"address"},{"internalType":"address","name":"_positionManager","type":"address"},{"internalType":"address","name":"_WETH9","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"approveMax","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"approveMaxMinusOne","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"approveZeroThenMax","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"approveZeroThenMaxMinusOne","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"callPositionManager","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"paths","type":"bytes[]"},{"internalType":"uint128[]","name":"amounts","type":"uint128[]"},{"internalType":"uint24","name":"maximumTickDivergence","type":"uint24"},{"internalType":"uint32","name":"secondsAgo","type":"uint32"}],"name":"checkOracleSlippage","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint24","name":"maximumTickDivergence","type":"uint24"},{"internalType":"uint32","name":"secondsAgo","type":"uint32"}],"name":"checkOracleSlippage","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct 
IV3SwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct 
IV3SwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct 
IV3SwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct 
IV3SwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factoryV2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getApprovalType","outputs":[{"internalType":"enum 
IApproveAndCall.ApprovalType","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount0Min","type":"uint256"},{"internalType":"uint256","name":"amount1Min","type":"uint256"}],"internalType":"struct 
IApproveAndCall.IncreaseLiquidityParams","name":"params","type":"tuple"}],"name":"increaseLiquidity","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint256","name":"amount0Min","type":"uint256"},{"internalType":"uint256","name":"amount1Min","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"internalType":"struct 
IApproveAndCall.MintParams","name":"params","type":"tuple"}],"name":"mint","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"previousBlockhash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"positionManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"pull","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"refundETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"selfPermit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"selfPermitAllowed","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"selfPermitAllowedIfNecessary","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"selfPermitIfNecessary","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"}],"name":"sweepToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"uint256","name":"feeBips","type":"uint256"},{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"sweepTokenWithFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"feeBips","type":"uint256"},{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"sweepTokenWithFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"unwrapWETH9","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"}],"name":"unwrapWETH9","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"feeBips","type":"uint256"},{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"unwrapWETH9WithFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountMinimum","type":"uint256"},{"internalType":"uint256","name":"feeBips","type":"uint256"},{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"unwrapWETH9WithFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"wrapETH","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"approveMax(address)":{"params":{"token":"The 
token to approve"}},"approveMaxMinusOne(address)":{"params":{"token":"The token to approve"}},"approveZeroThenMax(address)":{"params":{"token":"The token to 
approve"}},"approveZeroThenMaxMinusOne(address)":{"params":{"token":"The token to approve"}},"callPositionManager(bytes)":{"params":{"data":"Calldata to pass along to the position 
manager"},"returns":{"result":"The result from the call"}},"checkOracleSlippage(bytes,uint24,uint32)":{"params":{"maximumTickDivergence":"The maximum number of ticks that the price can degrade 
by","path":"The path to fetch prices over","secondsAgo":"The number of seconds ago to compute oracle prices against"}},"checkOracleSlippage(bytes[],uint128[],uint24,uint32)":{"params":{"amounts":"The 
weights for each entry in `paths`","maximumTickDivergence":"The maximum number of ticks that the price can degrade by","paths":"The paths to fetch prices over","secondsAgo":"The number of seconds ago to 
compute oracle prices against"}},"exactInput((bytes,address,uint256,uint256))":{"details":"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, 
enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in 
calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"details":"Setting `amountIn` to 0 will cause the 
contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"params":"The parameters necessary for the swap, encoded as 
`ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256))":{"params":{"params":"The parameters necessary for the 
multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input 
token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in 
calldata"},"returns":{"amountIn":"The amount of the input token"}},"getApprovalType(address,uint256)":{"details":"Lens to be called off-chain to determine which (if any) of the relevant approval 
functions should be called","params":{"amount":"The amount to approve","token":"The token to approve"},"returns":{"_0":"The required approval 
type"}},"increaseLiquidity((address,address,uint256,uint256,uint256))":{"params":{"params":"Calldata to pass along to the position manager"},"returns":{"result":"The result from the 
call"}},"mint((address,address,uint24,int24,int24,uint256,uint256,address))":{"params":{"params":"Calldata to pass along to the position manager"},"returns":{"result":"The result from the 
call"}},"multicall(bytes32,bytes[])":{"details":"The `msg.value` should not be trusted for any method callable from multicall.","params":{"data":"The encoded function data for each of the calls to make 
to this contract","previousBlockhash":"The expected parent blockHash"},"returns":{"_0":"The results from each of the calls passed in via data"}},"multicall(bytes[])":{"details":"The `msg.value` should 
not be trusted for any method callable from multicall.","params":{"data":"The encoded function data for each of the calls to make to this contract"},"returns":{"results":"The results from each of the 
calls passed in via data"}},"multicall(uint256,bytes[])":{"details":"The `msg.value` should not be trusted for any method callable from multicall.","params":{"data":"The encoded function data for each 
of the calls to make to this contract","deadline":"The time by which this function must be called before failing"},"returns":{"_0":"The results from each of the calls passed in via 
data"}},"pull(address,uint256)":{"params":{"token":"The token to pull","value":"The amount to pay"}},"refundETH()":{"details":"Useful for bundling with mint or increase liquidity that uses ether, or 
exact output swaps that use ether for the input amount"},"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"The `owner` is always msg.sender and the `spender` is always 
address(this).","params":{"deadline":"A timestamp, the current blocktime must be less than or equal to this timestamp","r":"Must produce valid secp256k1 signature from the holder along with `v` and 
`s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and `v`","token":"The address of the token spent","v":"Must produce valid secp256k1 signature from the holder along with 
`r` and `s`","value":"The amount that can be spent of token"}},"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"The `owner` is always msg.sender and the `spender` is always 
address(this)","params":{"expiry":"The timestamp at which the permit is no longer valid","nonce":"The current nonce of the owner","r":"Must produce valid secp256k1 signature from the holder along with 
`v` and `s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and `v`","token":"The address of the token spent","v":"Must produce valid secp256k1 signature from the holder 
along with `r` and `s`"}},"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"The `owner` is always msg.sender and the `spender` is always address(this) Can be used 
instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.","params":{"expiry":"The timestamp at which the permit is no longer valid","nonce":"The 
current nonce of the owner","r":"Must produce valid secp256k1 signature from the holder along with `v` and `s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and 
`v`","token":"The address of the token spent","v":"Must produce valid secp256k1 signature from the holder along with `r` and 
`s`"}},"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit 
to prevent calls from failing due to a frontrun of a call to #selfPermit","params":{"deadline":"A timestamp, the current blocktime must be less than or equal to this timestamp","r":"Must produce valid 
secp256k1 signature from the holder along with `v` and `s`","s":"Must produce valid secp256k1 signature from the holder along with `r` and `v`","token":"The address of the token spent","v":"Must produce 
valid secp256k1 signature from the holder along with `r` and `s`","value":"The amount that can be spent of token"}},"swapExactTokensForTokens(uint256,uint256,address[],address)":{"details":"Setting 
`amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.","params":{"amountIn":"The amount of token 
to swap","amountOutMin":"The minimum amount of output that must be received","path":"The ordered list of tokens to swap through","to":"The recipient address"},"returns":{"amountOut":"The amount of the 
received token"}},"swapTokensForExactTokens(uint256,uint256,address[],address)":{"params":{"amountInMax":"The maximum amount of input that the caller will pay","amountOut":"The amount of token to swap 
for","path":"The ordered list of tokens to swap through","to":"The recipient address"},"returns":{"amountIn":"The amount of token to pay"}},"sweepToken(address,uint256)":{"details":"The amountMinimum 
parameter prevents malicious contracts from stealing the token from users","params":{"amountMinimum":"The minimum amount of token required for a transfer","token":"The contract address of the token 
which will be transferred to msg.sender"}},"sweepToken(address,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing the token from 
users","params":{"amountMinimum":"The minimum amount of token required for a transfer","recipient":"The destination address of the token","token":"The contract address of the token which will be 
transferred to `recipient`"}},"sweepTokenWithFee(address,uint256,address,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing the token from 
users"},"sweepTokenWithFee(address,uint256,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing the token from 
users"},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool 
deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be 
received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be 
received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the 
IUniswapV3PoolActions#swap call"}},"unwrapWETH9(uint256)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.","params":{"amountMinimum":"The minimum 
amount of WETH9 to unwrap"}},"unwrapWETH9(uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.","params":{"amountMinimum":"The minimum 
amount of WETH9 to unwrap","recipient":"The address receiving ETH"}},"unwrapWETH9WithFee(uint256,address,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from 
stealing WETH9 from users."},"unwrapWETH9WithFee(uint256,uint256,address)":{"details":"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from 
users."},"wrapETH(uint256)":{"details":"The resulting WETH9 is custodied by the router, thus will require further distribution","params":{"value":"The amount of ETH to wrap"}}},"title":"Uniswap V2 and 
V3 Swap Router","version":1},"userdoc":{"kind":"user","methods":{"approveMax(address)":{"notice":"Approves a token for the maximum possible amount"},"approveMaxMinusOne(address)":{"notice":"Approves a 
token for the maximum possible amount minus one"},"approveZeroThenMax(address)":{"notice":"Approves a token for zero, then the maximum possible 
amount"},"approveZeroThenMaxMinusOne(address)":{"notice":"Approves a token for zero, then the maximum possible amount minus one"},"callPositionManager(bytes)":{"notice":"Calls the position manager with 
arbitrary calldata"},"checkOracleSlippage(bytes,uint24,uint32)":{"notice":"Ensures that the current (synthetic) tick over the path is no worse than `maximumTickDivergence` ticks away from the average as 
of `secondsAgo`"},"checkOracleSlippage(bytes[],uint128[],uint24,uint32)":{"notice":"Ensures that the weighted average current (synthetic) tick over the path is no worse than `maximumTickDivergence` 
ticks away from the average as of `secondsAgo`"},"exactInput((bytes,address,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified 
path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another 
token"},"exactOutput((bytes,address,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router 
after the swap."},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token that may remain in 
the router after the swap."},"increaseLiquidity((address,address,uint256,uint256,uint256))":{"notice":"Calls the position manager's increaseLiquidity 
function"},"mint((address,address,uint24,int24,int24,uint256,uint256,address))":{"notice":"Calls the position manager's mint function"},"multicall(bytes32,bytes[])":{"notice":"Call multiple functions in 
the current contract and return the data from all of them if they all succeed"},"multicall(bytes[])":{"notice":"Call multiple functions in the current contract and return the data from all of them if 
they all succeed"},"multicall(uint256,bytes[])":{"notice":"Call multiple functions in the current contract and return the data from all of them if they all 
succeed"},"pull(address,uint256)":{"notice":"Transfers the specified amount of a token from the msg.sender to address(this)"},"refundETH()":{"notice":"Refunds any ETH balance held by this contract to 
the `msg.sender`"},"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Permits this contract to spend a given token from 
`msg.sender`"},"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` 
parameter"},"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` 
parameter"},"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Permits this contract to spend a given token from 
`msg.sender`"},"swapExactTokensForTokens(uint256,uint256,address[],address)":{"notice":"Swaps `amountIn` of one token for as much as possible of another 
token"},"swapTokensForExactTokens(uint256,uint256,address[],address)":{"notice":"Swaps as little as possible of one token for an exact amount of another 
token"},"sweepToken(address,uint256)":{"notice":"Transfers the full amount of a token held by this contract to msg.sender"},"sweepToken(address,uint256,address)":{"notice":"Transfers the full amount of 
a token held by this contract to recipient"},"sweepTokenWithFee(address,uint256,address,uint256,address)":{"notice":"Transfers the full amount of a token held by this contract to recipient, with a 
percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"},"sweepTokenWithFee(address,uint256,uint256,address)":{"notice":"Transfers the full amount of a token held by this contract to 
msg.sender, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via 
IUniswapV3Pool#swap."},"unwrapWETH9(uint256)":{"notice":"Unwraps the contract's WETH9 balance and sends it to msg.sender as ETH."},"unwrapWETH9(uint256,address)":{"notice":"Unwraps the contract's WETH9 
balance and sends it to recipient as ETH."},"unwrapWETH9WithFee(uint256,address,uint256,address)":{"notice":"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage 
between 0 (exclusive), and 1 (inclusive) going to feeRecipient"},"unwrapWETH9WithFee(uint256,uint256,address)":{"notice":"Unwraps the contract's WETH9 balance and sends it to msg.sender as ETH, with a 
percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"},"wrapETH(uint256)":{"notice":"Wraps the contract's ETH balance into 
WETH9"}},"version":1}},"settings":{"compilationTarget":{"contracts/SwapRouter02.sol":"SwapRouter02"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"none"},"optimizer":{"enabled":true,"runs":1000000},"remappings":[]},"sources":{"@openzeppelin/contracts/drafts/IERC20Permit.sol":{"keccak256":"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f","license":"MIT","urls":["bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2","dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn"]},"@openzeppelin/contracts/introspection/IERC165.sol":{"keccak256":"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d","license":"MIT","urls":["bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea","dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa"]},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76","license":"MIT","urls":["bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b","dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU"]},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82","license":"MIT","urls":["bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf","dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe"]},"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol":{"keccak256":"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f","license":"MIT","urls":["bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4","dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r"]},"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol":{"keccak256":"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573","license":"MIT","urls":["bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1","dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb"]},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"keccak256":"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b","urls":["bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf","dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH"]},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"keccak256":"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1","license":"GPL-2.0-or-later","urls":["bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5","dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh"]},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"keccak256":"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69","license":"GPL-2.0-or-later","urls":["bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652","dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"keccak256":"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634","license":"GPL-2.0-or-later","urls":["bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5","dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"keccak256":"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5","license":"GPL-2.0-or-later","urls":["bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7","dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"keccak256":"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd","license":"GPL-2.0-or-later","urls":["bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03","dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"keccak256":"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7","license":"GPL-2.0-or-later","urls":["bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047","dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"keccak256":"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235","license":"GPL-2.0-or-later","urls":["bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735","dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"]},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"keccak256":"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f","license":"GPL-2.0-or-later","urls":["bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f","dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"]},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"keccak256":"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057","license":"MIT","urls":["bzz-raw://bc5a6ae776be3e7dcbd23d49ffbc9d792fed0ddf4b111ebb64b9bb2133ec263e","dweb:/ipfs/QmbAUtWqvipzEARQpFpkzYKBELy3qeW5WXnZxHFU84sxG7"]},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"keccak256":"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d","license":"GPL-2.0-or-later","urls":["bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37","dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp"]},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"keccak256":"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8","license":"GPL-2.0-or-later","urls":["bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869","dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU"]},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"keccak256":"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e","license":"GPL-2.0-or-later","urls":["bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a","dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8"]},"@uniswap/v3-periphery/contracts/base/BlockTimestamp.sol":{"keccak256":"0x1aa66f71234064a0c0976f62233f2edbd69554e5ad817dc97f318bc8e11f4da6","license":"GPL-2.0-or-later","urls":["bzz-raw://b3a40450e9d6b0f9cb91b40ffd6215612505bd74e7d954529958f4edc6ee7b93","dweb:/ipfs/QmewsUCHK5N5KhNtqEwK8JgsXFADyFBrQRS5HoDWM5gi3b"]},"@uniswap/v3-periphery/contracts/base/Multicall.sol":{"keccak256":"0xfcfd78c62d2145634a791d5680a1af7055fbd301c415d29c09333c99c37d9037","license":"GPL-2.0-or-later","urls":["bzz-raw://0d1c8f4a18cec8ad49e5269c5b07c7f6fd497dfc1b7b777f8ddcfb8055efd803","dweb:/ipfs/QmdeCTnfHM3RGtQuo3DMX9m7gPspGGwQp7ho6m9cJjjnER"]},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"keccak256":"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795","license":"GPL-2.0-or-later","urls":["bzz-raw://657920576878ca936157383782a97b74166c303a3932c0d72eac3a2d057c3a96","dweb:/ipfs/Qma71Ska1ZbPBnYpeE5S2EAeEtwGfHEMHo3SnDwY1fVmm5"]},"@uniswap/v3-periphery/contracts/base/PeripheryPayments.sol":{"keccak256":"0xd6129c6c9605d84b2a205eaec18a25090c4002be7c54da3cee61b84a882b820b","license":"GPL-2.0-or-later","urls":["bzz-raw://db1a47eaa47416ee2d1f4b9a988e02687579ac2280bd1ce28a52758e7eaabc44","dweb:/ipfs/QmcWrSBBRCay6SqWTt1kh4gfDFn2jQBtNZGQ6zk7vfZdNy"]},"@uniswap/v3-periphery/contracts/base/PeripheryPaymentsWithFee.sol":{"keccak256":"0x741fce65e52728144c6ebee5380418b9e70a59e04725f2dd7e922a82fd794651","license":"GPL-2.0-or-later","urls":["bzz-raw://6ed09cd710995191d01a51af53b9cb557337f623f061663a6d6d2ead74f18fc2","dweb:/ipfs/QmQDFQshWiHJZAKWKGAzo8vpjfRgmq9uoMp7NHnJdsAZEu"]},"@uniswap/v3-periphery/contracts/base/PeripheryValidation.sol":{"keccak256":"0xc736bab599912d6212e8414ee4ba7af0c1e08ff6aa11caa85f5f6e07f7d421c3","license":"GPL-2.0-or-later","urls":["bzz-raw://06f6c13a86900c71fa486fc029a59d1b7eb96162bb42885b5f845d995294893e","dweb:/ipfs/QmUcBxMsmncw9n6eXhzzwSasGBvBGKH5FT8HSrAxrsXV4A"]},"@uniswap/v3-periphery/contracts/base/SelfPermit.sol":{"keccak256":"0xe75aedfc1eff6c84adac82b2bc41d197127a74530f0c344a7a122a6c8ec186be","license":"GPL-2.0-or-later","urls":["bzz-raw://05150ae691e10f2c9c82ad46de86c8b6683d8eba995e6f9ff82eaefc064902e9","dweb:/ipfs/QmdKxxmxCPxV7qe11MbRhpaQXDAnnKWH1BoTMmEXYPAA7g"]},"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol":{"keccak256":"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4","license":"GPL-2.0-or-later","urls":["bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471","dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL"]},"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol":{"keccak256":"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b","license":"GPL-2.0-or-later","urls":["bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016","dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD"]},"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol":{"keccak256":"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1","license":"GPL-2.0-or-later","urls":["bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460","dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf"]},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"keccak256":"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d","license":"GPL-2.0-or-later","urls":["bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f","dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127"]},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol":{"keccak256":"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274","license":"GPL-2.0-or-later","urls":["bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407","dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp"]},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPaymentsWithFee.sol":{"keccak256":"0x23ebe0ced112c7ca3869868874b691fcbb50f90c482580dc9ebe718bda34edfc","license":"GPL-2.0-or-later","urls":["bzz-raw://689ebfcb90a26bf31af6e35456e41940c23d145cfc59d1ae5f6fa060945dd768","dweb:/ipfs/QmZxVsaUWqnEEsRcphuWBvuEExQxznztSmFUkMa5ks8AHY"]},"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol":{"keccak256":"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862","license":"GPL-2.0-or-later","urls":["bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f","dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu"]},"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol":{"keccak256":"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be","license":"GPL-2.0-or-later","urls":["bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678","dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb"]},"@uniswap/v3-periphery/contracts/interfaces/external/IERC20PermitAllowed.sol":{"keccak256":"0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d","license":"GPL-2.0-or-later","urls":["bzz-raw://783be851155842a02cdb0483c3a69ecc0e7ae8545f65cec1d4aeb355b2026a7d","dweb:/ipfs/QmZNBQosTjpGNKB3Eo2K6Zzye7FYiLVoEki5iPB2Y69jz2"]},"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol":{"keccak256":"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c","license":"GPL-2.0-or-later","urls":["bzz-raw://8c3c81eb23b88076475e8ddd4edccb007358fa64911fc7e671a00adaf2006e75","dweb:/ipfs/QmPbrPJ4w3UDPioJCvgtxMRaWNRa7tKHqDLtU17DTZPHBB"]},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"keccak256":"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4","license":"GPL-2.0-or-later","urls":["bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc","dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH"]},"@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol":{"keccak256":"0x490c80ca7f4a0ee0514041ddec0867e8a52b24febf1670991797af8fed9f3eec","license":"GPL-2.0-or-later","urls":["bzz-raw://f775ba8ad52041a351fbd7000801266d5a10be2f1a53d13c6c9862b2baa935bd","dweb:/ipfs/Qmcaxyr6VutZeaymeBNVcZrBVAHhyJ11sjhWpgj2GX6D5K"]},"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol":{"keccak256":"0xd56f79253d8d8de5f5e9e77c6253b1f8c89b203343d99122175e9578a3450479","license":"GPL-2.0-or-later","urls":["bzz-raw://ec2bd8848453debc10e1eb0fe08b9d763f0bfaf2301bd017eac72a62ccaf31b8","dweb:/ipfs/QmcMGpahrDCidLnKx4edD36NqWHrt2uga4DjrhhSLECtpc"]},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"keccak256":"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61","license":"GPL-2.0-or-later","urls":["bzz-raw://27aeff27314476ab3c77313ae1f0c5b2442b86315f5ce741cb2150a87c3cbad3","dweb:/ipfs/QmQNno2g1CJvjnH6ych4LuHr1UZDEZPACgYG4XvivxGrqV"]},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"keccak256":"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2","license":"GPL-2.0-or-later","urls":["bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840","dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w"]},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"keccak256":"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd","license":"GPL-2.0-or-later","urls":["bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2","dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v"]},"contracts/SwapRouter02.sol":{"keccak256":"0x65e4b1c2c250099a00b01e20467774bd69b2d9e565c93b9cc5337cd71a63af76","license":"GPL-2.0-or-later","urls":["bzz-raw://27a4f3ca19c66958c0c53eea40d2ce06bc17964269907a8ac079b530dc98b11c","dweb:/ipfs/QmNcPJ4ebRZBhJu1P8KPKzVviafthYxPTJ33QMy9iXpiiu"]},"contracts/V2SwapRouter.sol":{"keccak256":"0x00f7af97d64149f8c5d11504799a75a599c971d870c81e27b0cd056ba8c9ad66","license":"GPL-2.0-or-later","urls":["bzz-raw://37f14c6e7301999338ffe8d2a29833a85eb33e498e4e5f98f3ac81952ac6bc2e","dweb:/ipfs/QmQituHjh4uHPPYNaejVVxWhZGxuwHVzVFqLhoxfPcDjZK"]},"contracts/V3SwapRouter.sol":{"keccak256":"0x645bcaebf2869f2ed4d7f7e56fa5f76833143e56fe8abeaf50da5b1982227412","license":"GPL-2.0-or-later","urls":["bzz-raw://0ccee45a23bb7ca2f1007b429b9deb3127127070f68c219cc812c27682e21313","dweb:/ipfs/QmeMRBVoJvqcMmHHdpz2e6A6H71mG8gzgmiJnSgbZLuc1c"]},"contracts/base/ApproveAndCall.sol":{"keccak256":"0xb1a0abf6becbbbc32425dc308a55a9ff8ea980ddacaec6bcc871bb94237be5cc","license":"GPL-2.0-or-later","urls":["bzz-raw://32e1694440cbfd846720b38e1fe8e092f90784112955b121b0afcc0cfd7b11ed","dweb:/ipfs/QmeEAsJCmxebWyo44oNBXMnWfdBX3h6xUwtEPmvYTJ6R7o"]},"contracts/base/ImmutableState.sol":{"keccak256":"0x99bd366f5ab50cf2f6d2242021b57bda76235d2d71d9a3bd6789be4b867f5b2a","license":"GPL-2.0-or-later","urls":["bzz-raw://f871d287bb528498b36a6a2fa27641841d2343b543b28efffaa1dff69eb3c7d4","dweb:/ipfs/Qma3AVQqYF9DaMG4r7J1m6parBf8xjpuabBpBQKDsDwD6C"]},"contracts/base/MulticallExtended.sol":{"keccak256":"0x204e06ccc534fbe6a287d09e00241b825a895ba14a3894b66fba6c45154cbc6e","license":"GPL-2.0-or-later","urls":["bzz-raw://6a43dc4784e762ee47df4f6af4fe5c056559b3e27eee89337ff7e512660e40a0","dweb:/ipfs/QmZcLvXZ5pn2w73kYRd1X9tU4qoBkkHEtd5B3WWTgMjoHR"]},"contracts/base/OracleSlippage.sol":{"keccak256":"0x9aa4e3ec7f8e97fb4eb50c62715ef1882e5c1913e8d0f47519dd1789ba2097bf","license":"GPL-2.0-or-later","urls":["bzz-raw://62d5766726642929016e468e96ade43ac2083a92a78caaa5ac51a12a4351abfd","dweb:/ipfs/QmZhdDmgYmTXWrRMWZGwcwgmomD2S1UkDYsBsYvkppzoQR"]},"contracts/base/PeripheryPaymentsExtended.sol":{"keccak256":"0x25a0c2bb493638f5d2bfe560651e46036e8f7f760ed9a40d80bd4ddd698909b4","license":"GPL-2.0-or-later","urls":["bzz-raw://f539457e8293a47c1538f1d5eb6e4fd56b8ccc136b5d0313988d232e062ced38","dweb:/ipfs/QmQfnjiBvHjf27R2FuMVw2LXFWcHAbZBnTxNn5Hj3NheLt"]},"contracts/base/PeripheryPaymentsWithFeeExtended.sol":{"keccak256":"0xeb64fa0d325e681c388e1328ba4ce5d4ffbccecabd32e2271c5665359548ccf0","license":"GPL-2.0-or-later","urls":["bzz-raw://6087c968d12c6aa1fd2c3a116a2352b7b897d930ad04b35021551385c44999aa","dweb:/ipfs/QmafE3L6X2FYJTHocMz2Y4jmueH22ZL11KPBPecp6E7PWB"]},"contracts/base/PeripheryValidationExtended.sol":{"keccak256":"0x241a9cf357b45b9e21673f7f1742cfed6ed0289e9e72b295805be4cf76bbdde3","license":"GPL-2.0-or-later","urls":["bzz-raw://e058457f0089a9b33d093744594a69c6559355877c07ed8e9283056e0d3cd4ab","dweb:/ipfs/QmVnZFC3Qw2TVy5RnmtST1vH66FrA1Q8mCmgraQDFYTfdV"]},"contracts/interfaces/IApproveAndCall.sol":{"keccak256":"0x7d3824ad9a4090e2f4bb98d844f6ceb720f8c2608a909e4c0d86584be32d7fce","license":"GPL-2.0-or-later","urls":["bzz-raw://8230cdc6fd9171081943821d71888cec07bf4bae0b5fb85fa7c450f3c2b1ad44","dweb:/ipfs/QmXF9NtVtCjr92ngVwwDjSGpiktGz2BDPHsvVoFPgkSP4K"]},"contracts/interfaces/IImmutableState.sol":{"keccak256":"0xe30562a3c59b7a755b558c688e9c87b7b8f919be54cf9f46507afe2537adc5db","license":"GPL-2.0-or-later","urls":["bzz-raw://5895db6514b4a5d9dde4fd5f324cf812e433aeef7d3118b1abb50a310bdd7025","dweb:/ipfs/QmWpSNSRffRgsTn7MYLshzyXSvur4XHre4tpbHxLbsVvEB"]},"contracts/interfaces/IMulticallExtended.sol":{"keccak256":"0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997","license":"GPL-2.0-or-later","urls":["bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e","dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu"]},"contracts/interfaces/IOracleSlippage.sol":{"keccak256":"0xa9d1e4336b20fa992ab6b742f2750b3fb660e0d667eac304c5bbd8a8ea96edfc","license":"GPL-2.0-or-later","urls":["bzz-raw://afe7afc18f293b6bc189550f20c318ecccda37241409a031bc94cf7412420dbd","dweb:/ipfs/QmVuiKox1K4Df5QS6RLHQDprYaDMXRRvHW3ym3NDdi3vrq"]},"contracts/interfaces/IPeripheryPaymentsExtended.sol":{"keccak256":"0x897628dc9cb66ea0b2237a12853d56f791a6acadb86906b33220213468c02fcc","license":"GPL-2.0-or-later","urls":["bzz-raw://77bad78429be394d0c25e37898de8ee4f44e646572744d9af05fd7139d77270b","dweb:/ipfs/QmbZ5R5eDRYtfgFTwNNgY4U77vwCrqUGgk5uKnxDYNrJNj"]},"contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol":{"keccak256":"0x297f6db20c8faf7085e40e540ac3da6cba16bace8bf5cc1cc643d400838625c8","license":"GPL-2.0-or-later","urls":["bzz-raw://845fee2d9013715a3ff7ab6ceec396a9469573c6f2f2a0f8765cad1e00e716b6","dweb:/ipfs/QmbNvshbebo7pXYcLMGtcCc3CC4L9suQPH5MAw8at9BZL7"]},"contracts/interfaces/ISwapRouter02.sol":{"keccak256":"0xf846912bb8c8f4be872ae152550227caba219d3b4d6e85b809fb3cbad984d43b","license":"GPL-2.0-or-later","urls":["bzz-raw://43fff68a8267ac961dbee325c4ced73dfeb70537c679e38c3e82f65e8d859d2f","dweb:/ipfs/QmfLTEJR1Rt3ZgWq1fvMhKmzhgGrVxHuhDJAYx6wTME5pD"]},"contracts/interfaces/IV2SwapRouter.sol":{"keccak256":"0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb","license":"GPL-2.0-or-later","urls":["bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287","dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU"]},"contracts/interfaces/IV3SwapRouter.sol":{"keccak256":"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c","license":"GPL-2.0-or-later","urls":["bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9","dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo"]},"contracts/libraries/Constants.sol":{"keccak256":"0x6eeb0392bef0afeb03e18f0e2824a96e76e55282176ea8b64e14a0fba91c9bf2","license":"GPL-2.0-or-later","urls":["bzz-raw://7ed2216986be881a9924e6efb5f3848367d0fad8cc60c4eb1772791773fedc45","dweb:/ipfs/QmemwuJYDGRheUQxtzxH6mV18xTBFYtVJK26DNtbSSaC9k"]},"contracts/libraries/UniswapV2Library.sol":{"keccak256":"0x88771c1613d293639d8ffb3678bcc313005f4b3a3fb71e90067705d173373303","license":"GPL-2.0-or-later","urls":["bzz-raw://64b8d41baddb45a4dbef522b794a76141fb1f9292dd88ec979cdbd6620933a1f","dweb:/ipfs/QmepnTFB836FGb7HwRGKH9Ee12gr1LDvDydWwW9jK9puw9"]}},"version":1}
